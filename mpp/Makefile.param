# Makefile.param 
# 
# Only global variable should be defined here.
# All the variables must be used as "export" and "?=".
# Otherwise, there will be some errors, when Makefile.param is nested.

# Use this file as the following sample
# ifeq ($(PARAM_FILE), )
#     PARAM_FILE:=../Makefile.param
#     include $(PARAM_FILE)
# endif

#
# .config is generated by menuconfig, all the configs can be defined in menuconfig.
# 

#include $(shell pwd)/../.config

export PARAM_FILE
PARAM_DIR=$(PWD)/$(shell dirname $(PARAM_FILE))
#include $(shell pwd)/$(PARAM_DIR)/cfg.mak
include $(PARAM_DIR)/cfg.mak

export HIWORK_PATH?=/hiwork

ifeq ($(CONFIG_KERNEL_BIT), KERNEL_BIT_32)
    export ARCH=arm
else
    export ARCH=arm64
endif

export PRODUCT?=IPC
export MPP_BUILD=n

# export global variables
export HIARCH?=$(CONFIG_HI_ARCH)
export HICHIP?=$(CONFIG_HI_CHIP_TYPE)

export ARCH_DIR?=$(CONFIG_HI_ARCH)
export EXT_DRV?=$(CONFIG_HI_ARCH)
export INTER_DRV?=$(CONFIG_HI_ARCH)

# uclibc or glibc
export LIBC?=$(CONFIG_LIBC_TYPE)

# linux or HuaweiLite
export OSTYPE?=$(CONFIG_OS_TYPE)
export KERNEL_NAME?=$(CONFIG_KERNEL_VERSION)


# Whether support the debug information. HI_DEBUG or HI_RELEASE or AXIS
export HI_RLS_MODE?=$(CONFIG_HI_RLS_MODE)

ifeq ($(HI_RLS_MODE),HI_DEBUG)
        export DBG_FLAG=0
else
        export DBG_FLAG=0
endif

# cpu type single/big-little
export CPU_TYPE?=$(CONFIG_CPU_TYPE)

# -g 
export HIGDB?=$(CONFIG_HI_GDB)

# FPGA board or not
export FPGA?=$(CONFIG_HI_FPGA)

# CROSS 
export CROSS_COMPILE?=$(CONFIG_HI_CROSS)
export CROSS?=$(CONFIG_HI_CROSS_LIB)

ifeq ($(HIARCH), )
	$(error HIARCH not defined! Please check!)
endif

ifeq ($(LIBC), )
	$(error LIBC not defined! Please check!)
endif

ifeq ($(FPGA),y)
	export HI_FPGA:=HI_FPGA
	
	ifeq ($(CONFIG_UMAP6),y)
		export UMAP:=UMAP6
	else ifeq ($(CONFIG_UMAP7),y)
		export UMAP:=UMAP7
	else ifeq ($(CONFIG_UMAP7P),y)
		export UMAP:=UMAP7P
	else	
		export UMAP:=UMAPXXX
	endif		
else
	export HI_FPGA:=HI_XXXX
endif

# Get the local SDK_ROOT path or RELEASE_ROOT path by PARAM_FILE.
# PARAM_FILE is configed at Makefile before include this file
#export SDK_PATH?=$(shell cd $(shell pwd)/`dirname $(PARAM_FILE)`/..; pwd)
export SDK_PATH?=$(PARAM_DIR)/..
export MPP_PATH?=$(PARAM_DIR)
export DRV_ROOT?=$(SDK_PATH)/drv
export OSAL_ROOT?=$(SDK_PATH)/osal


export MPP_CFLAGS:= -Wall -Wno-error=implicit-function-declaration
export DRV_CFLAGS:= -Wall -Wno-error=implicit-function-declaration

ifeq ($(HIGDB), y)
	MPP_CFLAGS += -g
endif

# Define the object output directory
ifeq ($(MPP_BUILD), y)
	export EXTDRV:=drv/extdrv/$(EXT_DRV)
	export REL_DIR=$(SDK_PATH)/mpp/out/$(HIARCH)/$(OSTYPE)/$(CPU_TYPE)
	export SAMPLE_DIR=$(SDK_PATH)/mpp/sample/$(HIARCH)

else
#### MPP_BUILD=n ######
	export EXTDRV:=drv/extdrv
	export REL_DIR=$(SDK_PATH)/mpp/out/$(OSTYPE)/$(CPU_TYPE)
	export SAMPLE_DIR=$(SDK_PATH)/mpp/sample

endif



# Define the param of audio 
export AUDIO_PATH?=$(MPP_PATH)/cbb/audio/component/lib/$(HIARCH)/$(CROSS)/$(OSTYPE)

export AUDIO_LIBA ?= $(REL_LIB)/libVoiceEngine.a\
                     $(REL_LIB)/libupvqe.a\
                     $(REL_LIB)/libdnvqe.a\
		     $(REL_LIB)/libaacenc.a\
		     $(REL_LIB)/libaacdec.a

export AUDIO_LIBS ?= $(REL_LIB)/libVoiceEngine.so\
                     $(REL_LIB)/libupvqe.so\
                     $(REL_LIB)/libdnvqe.so\
		     $(REL_LIB)/libaacenc.so\
		     $(REL_LIB)/libaacdec.so
			 
export LIBS_CFLAGS
export LIBS_LD_CFLAGS
###############################################################################
# LIB GLOBAL CFLAGS
ifeq ($(HIARCH),$(filter $(HIARCH), hi3559av100es))
ifeq ($(CPU_TYPE),single)
	LIBS_CFLAGS    += -mcpu=cortex-a53
	LIBS_LD_CFLAGS += -mcpu=cortex-a53
else
	LIBS_CFLAGS    += -mcpu=cortex-a73.cortex-a53
	LIBS_LD_CFLAGS += -mcpu=cortex-a73.cortex-a53
endif

endif


# common CFLAGS
LIBS_CFLAGS +=  -fno-aggressive-loop-optimizations -ldl -ffunction-sections -fdata-sections -O2
LIBS_LD_CFLAGS += -fno-aggressive-loop-optimizations -ldl
#LIBS_CFLAGS +=  -mno-unaligned-access -fno-aggressive-loop-optimizations -ldl -ffunction-sections -fdata-sections
#LIBS_LD_CFLAGS += -mno-unaligned-access -fno-aggressive-loop-optimizations -ldl

#secure CFLAGS
LIBS_CFLAGS += -fstack-protector -fPIC 
LIBS_LD_CFLAGS += -fstack-protector -Wl,-z,relro -Wl,-z,noexecstack -fPIC

###############################################################################

#********************* Macro for version management***************************** 
VER_X ?= 1
VER_Y ?= 0
VER_Z ?= 0
VER_P ?= 0
VER_B ?= 10
MPP_CFLAGS += -DVER_X=$(VER_X) -DVER_Y=$(VER_Y) -DVER_Z=$(VER_Z) -DVER_P=$(VER_P) -DVER_B=$(VER_B)
#******************************************************************************* 

MPP_CFLAGS += -D$(CONFIG_USER_BIT) -D$(CONFIG_KERNEL_BIT)

#-D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE is for mmap64
ifeq ($(CONFIG_KERNEL_BIT),KERNEL_BIT_64)
	LIBS_CFLAGS += -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE
	LIBS_LD_CFLAGS += -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE
endif


export JPEGE DCF=$(CONFIG_HI_JPEGE_DCF)

ifeq ($(JPEGE DCF), y)
         MPP_CFLAGS += -DENABLE_JPEGEDCF
endif



# include the config file of platform
include $(MPP_PATH)/Makefile.$(OSTYPE).param

# End!!
